{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","placeholder","defaultProps","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAWVC,mBAAS,IAXC,mBAWvCC,EAXuC,KAW3BC,EAX2B,KAuC9C,OAEI,sBAAMC,SAlBW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAalB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAhCc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,QAgCfG,YAAY,uBAmB5Bf,EAAYgB,aAAe,CACvBf,cAAe,iB,mCCjENgB,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAUFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAjBvB,kBAqBZM,GArBY,4CAAH,sDCHPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACjC,OACI,sBAAKc,UAAU,0CAAf,UACI,4BAAIJ,IACJ,qBAAKK,IAAKf,EAAKgB,IAAKN,QCuCjBO,EAvCC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECHN,SAACA,GAAc,IAAD,EACZhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAwBtC,OAjBAC,qBAAU,WAENxB,EAAQC,GACHwB,MAAK,SAAAC,GAAI,OACNH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKtB,CAACpB,IAMGqB,EDlB2BK,CAAa1B,GAAjCa,EAHgB,EAGtBN,KAAca,EAHQ,EAGRA,QAYtB,OACI,qCACI,oBAAIJ,UAAU,qCAAd,SAAoDhB,IACpD,uBACCoB,GAAW,wCACZ,qBAAKJ,UAAU,YAAf,SAKQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEoBtBgB,EA/CM,WAAO,IAAD,EAEa3C,mBAAS,CAAC,KAFvB,mBAEhB4C,EAFgB,KAEJ7C,EAFI,KAcvB,OACI,qCACI,yCACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BAEQ6C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCzBjC6B,IAASC,OAEP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8c685227.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n\r\n    // HANDLE INPUT CHANGE : Aqui estamos maniuplando el valor recibido\r\n    // por el input de tipo texto, a traves del estado.\r\n    // Su estado por default es el de 'Agregue una categoria'\r\n    // Cuando es modificado, utilizamos el handleInputChange para tomar\r\n    // el nuevo valor, seteandolo con el setInputValue.\r\n\r\n\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setinputValue(e.target.value)\r\n    }\r\n\r\n\r\n\r\n    // HANDLE SUBMIT : Los formularios por defecto, al ser enviados\r\n    // refrescan la pagina completa, con el e.preventDefault() \r\n    // estamos evitando eso. El (e) toma el evento recibido por el onSubmit.\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setinputValue('');\r\n\r\n        }\r\n\r\n\r\n        // console.log('Submit hecho')\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type='text'\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n                placeholder='Search category'\r\n            />\r\n\r\n\r\n        </form>\r\n\r\n\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\nAddCategory.defaultProps = {\r\n    setCategories: 'Add Categorie'\r\n}","\r\n\r\n\r\n\r\n\r\nexport const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=Ekj7W5AbyXrw3AkbLCrfenJNfEPQ08yG`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n\r\n\r\n    // CONST GIFS : Recorriendo todas las imagenes pero solo retornando\r\n    // el id, el titulo y la url.\r\n\r\n\r\n\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__flipInX\">\r\n            <p>{title}</p>\r\n            <img src={url} alt={title} />\r\n\r\n        </div >\r\n    )\r\n}\r\n","//import React, { useState, useEffect } from 'react'\r\nimport React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__flipInX'>{category}</h3>\r\n            <hr />\r\n            {loading && <p>Loading</p>}\r\n            <div className='card-grid'>\r\n\r\n\r\n\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n\r\n            </div >\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default GifGrid;","import { useEffect, useState } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n            .then(imgs =>\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                }))\r\n\r\n\r\n\r\n    }, [category]);\r\n\r\n\r\n\r\n\r\n\r\n    return state;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['']);\r\n\r\n    /*const handleArr = () => {\r\n        const newCategorie = 'One Piece';\r\n        //setCategories([...categories, newCategorie]);\r\n        //setCategories([newCategorie, ...categories,]);\r\n        setCategories(cats => [...cats, newCategorie]);\r\n    }\r\n    */\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>Gif App</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n\r\n\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category =>\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category} />\r\n                    )\r\n                }\r\n            </ol>\r\n\r\n\r\n        </>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default GifExpertApp;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}